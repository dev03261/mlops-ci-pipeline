name: MLOps CI Pipeline

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: read
  issues: write

env:
  CLUSTER_NAME: mlops-cluster
  LOAD_TEST_DURATION: 30s
  LOAD_TEST_QPS: 50
  LOAD_TEST_CONCURRENCY: 10

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install tools
      run: |
        echo "🔧 Installing tools..."
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind && sudo mv ./kind /usr/local/bin/kind
        
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        go install github.com/rakyll/hey@latest
        sudo apt-get update && sudo apt-get install -y jq
        
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
        
    - name: Create Kubernetes cluster
      run: |
        echo "🏗️ Creating cluster..."
        kind create cluster --config=k8s/kind-config.yaml --wait=300s
        kubectl get nodes
        
    - name: Deploy NGINX Ingress
      run: |
        echo "🌐 Deploying ingress..."
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        ./scripts/wait-for-deployment.sh ingress-nginx ingress-nginx-controller 300
        
    - name: Deploy applications
      run: |
        echo "📦 Deploying apps..."
        helm upgrade --install foo ./helm/http-echo \
          --set app.name=foo --set app.response=foo --wait --timeout=5m
        helm upgrade --install bar ./helm/http-echo \
          --set app.name=bar --set app.response=bar --wait --timeout=5m
        kubectl get pods
        
    - name: Configure ingress
      run: |
        echo "🚪 Configuring ingress..."
        kubectl apply -f k8s/ingress.yaml
        ./scripts/wait-for-ingress.sh echo-ingress 120

    - name: Map ingress hosts
      run: |
        echo "127.0.0.1 foo.localhost bar.localhost" | sudo tee -a /etc/hosts
        cat /etc/hosts | tail -n 5   # debug: show last few lines

    - name: Health checks
      run: |
        echo "🏥 Health checks..."
        ./scripts/health-check.sh
        

    - name: Load testing
      run: |
        echo "🔥 Load testing..."
        ./scripts/load-test.sh \
          --duration="$LOAD_TEST_DURATION" \
          --qps="$LOAD_TEST_QPS" \
          --concurrency="$LOAD_TEST_CONCURRENCY" \
          --output-dir="./results"
        
    - name: Display results
      run: |
        echo "📊 Load test results:"
        if [ -f "./results/foo_results.txt" ]; then
          echo "=== FOO Results ==="
          cat ./results/foo_results.txt
        fi
        if [ -f "./results/bar_results.txt" ]; then
          echo "=== BAR Results ==="
          cat ./results/bar_results.txt
        fi
        
    - name: Post results to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let results = '📊 Load Testing Results:\n\n';
          
          if (fs.existsSync('./results/foo_results.txt')) {
            const foo = fs.readFileSync('./results/foo_results.txt', 'utf8');
            results += '### FOO Service:\n```\n' + foo + '\n```\n\n';
          }
          
          if (fs.existsSync('./results/bar_results.txt')) {
            const bar = fs.readFileSync('./results/bar_results.txt', 'utf8');
            results += '### BAR Service:\n```\n' + bar + '\n```\n\n';
          }
          
          const body = `## 🚀 MLOps Pipeline Results
          
          ✅ **SUCCESS** - All components deployed and tested!
          
          **Addressing Previous Feedback:**
          - ✅ Helm charts eliminate YAML duplication
          - ✅ Proper ingress testing (not port-forwarding)
          - ✅ Health checks with retry logic  
          - ✅ Parameterized scripts with error handling
          - ✅ Resource limits and security contexts
          - ✅ Comprehensive documentation
          
          ${results}
          
          **Technical Implementation:**
          - 🏗️ Multi-node Kubernetes cluster (3 nodes)
          - 🌐 NGINX Ingress Controller
          - 📦 Helm-based deployments
          - 🏥 Health validation with retries
          - 🔥 Load testing through ingress routing
          
          *Pipeline completed: ${new Date().toISOString()}*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
        
    - name: Cleanup
      if: always()
      run: |
        echo "�� Cleaning up..."
        kind delete cluster --name "$CLUSTER_NAME" || true